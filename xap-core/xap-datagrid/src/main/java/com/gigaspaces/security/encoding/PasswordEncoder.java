/*
 * Copyright (c) 2008-2016, GigaSpaces Technologies, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.gigaspaces.security.encoding;

/**
 * Interface for performing one-way encryption and authenticity validation on a password.
 *
 * @author Moran Avigdor
 * @since 7.0.1
 */
public interface PasswordEncoder {

    /**
     * Encodes the specified raw password with an implementation specific algorithm. <p> This will
     * generally be a one-way message digest such as MD5 or SHA, but may also be a plaintext variant
     * which does no encoding at all, but rather returns the same password it was fed. The latter is
     * useful to plug in when the original password must be stored as-is. </p>
     *
     * @param rawPass the password to encode
     * @return encoded password
     * @throws EncodingException if couldn't encode the raw password
     */
    String encodePassword(String rawPass) throws EncodingException;

    /**
     * Validates a specified "raw" password against an encoded password. <p> The encoded password
     * should have previously been generated by {@link #encodePassword(String)} . This method will
     * encode the <code>rawPass</code>, and then compare it with the presented <code>encPass</code>.
     * </p>
     *
     * @param encPass a pre-encoded password
     * @param rawPass a raw password to encode and compare against the pre-encoded password
     * @return true if the password is valid, false otherwise
     * @throws EncodingException if couldn't encode the raw password (see {@link
     *                           #encodePassword(String)})
     */
    boolean isPasswordValid(String encPass, String rawPass) throws EncodingException;
}
