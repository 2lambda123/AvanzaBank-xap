/*
 * Copyright (c) 2008-2016, GigaSpaces Technologies, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.gigaspaces.lrmi;

import com.gigaspaces.internal.stubcache.StubId;
import com.gigaspaces.internal.version.PlatformLogicalVersion;

import java.net.InetSocketAddress;
import java.rmi.RemoteException;
import java.util.Map;

/**
 * Represents a remote proxy which uses lrmi for remote method invocation
 *
 * @author eitany
 * @since 7.1
 */
public interface ILRMIProxy {
    /**
     * @return whether this proxy is connected to a remote stub
     */

    boolean isRemote();

    /**
     * @return returns the logical version of the service
     */
    PlatformLogicalVersion getServicePlatformLogicalVersion();

    /**
     * @return the stub id
     */
    StubId getStubId();

    /**
     * @return entire traffic generated by this proxy in bytes, this number is not necessarily
     * monotonic as each connection in the stub holds this data per connection, once this connection
     * is disconnected/reconnected this data is reseted.
     * @since 8.0
     */
    long getGeneratedTraffic();

    /**
     * @return entire traffic received by this proxy in bytes this number is not necessarily
     * monotonic as each connection in the stub holds this data per connection, once this connection
     * is disconnected/reconnected this data is reseted.
     * @since 8.0
     */
    long getReceivedTraffic();

    /**
     * @return the connection url of the stub
     * @since 8.0
     */
    String getConnectionUrl();

    /**
     * @return the process id of the stub
     * @since 9.5.0
     */
    long getRemoteProcessId();

    /**
     * @return return the host name of the stub
     * @since 9.5.0
     */
    String getRemoteHostName();

    /**
     * @return return the host address of the stub
     * @since 9.5.0
     */
    String getRemoteHostAddress();

    /**
     * @return the ip address + port of the stub
     * @since 9.5.0
     */
    InetSocketAddress getRemoteNetworkAddress();

    /**
     * Force this stub to be disabled (disconnected from its target)
     *
     * @since 8.0.3
     */
    void disable() throws RemoteException;

    /**
     * Removes state of any previously called {@link #disable()}
     *
     * @since 8.0.3
     */
    void enable() throws RemoteException;

    /**
     * Overrides the LRMI methods metadata. Can only be used before first invocation.
     *
     * @since 8.0.3
     */
    void overrideMethodsMetadata(Map<String, LRMIMethodMetadata> methodsMetadata);

    /**
     * Close the underline proxy connection and resources, this proxy will no longer be usable.
     */
    void closeProxy();

    /**
     * @return true if this proxy is closed.
     */
    boolean isClosed();
}
