/*
 * Copyright (c) 2008-2016, GigaSpaces Technologies, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.gigaspaces.datasource;

import com.j_spaces.core.client.SQLQuery;

import java.sql.PreparedStatement;

/**
 * <pre>
 * {@link SQLDataProvider} should be implemented when complex queries are used
 * by the client.
 *
 * The space uses {@link SQLDataProvider} when the query can not be expressed as one template.
 * Usually in the following scenarios:<br>
 * - {@link SQLQuery}.
 * - extended matching.
 * - range values.
 *
 *  {@link SQLDataProvider}  is an interface that
 *  handles {@link SQLQuery}  objects, generated by space.
 *
 * This interface
 *
 * This interface can be implemented instead of the {@link DataProvider}.
 * In case that both interface are implemented -
 *  the space will choose SQLDataProvider.
 *  </pre>
 *
 * @author anna
 * @since 6.0
 * @deprecated since 9.5 - use {@link SpaceDataSource} instead.
 */
@Deprecated
public interface SQLDataProvider<T> extends ManagedDataSource<T> {
    /**
     * <pre>
     * Create an iterator over all objects that match the given {@link SQLQuery}.
     * SQLQuery contains a string representation of SQL 'where' clause.
     * The format matches the {@link PreparedStatement} format(field1 = ? and field2 > ? and ....).
     * The prepared values are accessible by {@link SQLQuery}.getPreparedValues() method
     *
     * Example implementation with SQL PreparedStatement:
     *
     * <code>
     * PreparedStatement st = con.prepareStatement(query.getSelectAllQuery());
     *
     * int index = 0;
     *
     * if(query.hasPreparedValues())
     * {
     * 	for(Iterator iter = query.getPreparedValues().iterator();iter.hasNext())
     *    {
     * 		st.setObject(++index,iter.next());
     *    }
     * }
     *
     * ResultSet rs = st.executeQuery();
     *
     * return new ResultSetIterator(rs);
     * </code>
     * </pre>
     *
     * @return a {@link DataIterator} or null if no data was found that match the given template
     */
    public abstract DataIterator<T> iterator(SQLQuery<T> query)
            throws DataSourceException;
}
