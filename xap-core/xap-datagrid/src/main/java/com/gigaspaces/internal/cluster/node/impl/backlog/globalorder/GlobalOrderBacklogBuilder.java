/*
 * Copyright (c) 2008-2016, GigaSpaces Technologies, Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.gigaspaces.internal.cluster.node.impl.backlog.globalorder;

import com.gigaspaces.internal.cluster.node.impl.backlog.IReplicationBacklogBuilder;
import com.gigaspaces.internal.cluster.node.impl.backlog.IReplicationGroupBacklog;
import com.gigaspaces.internal.cluster.node.impl.config.DynamicSourceGroupConfigHolder;
import com.gigaspaces.internal.cluster.node.impl.packets.data.IReplicationPacketDataProducer;
import com.gigaspaces.internal.cluster.node.impl.processlog.IReplicationTargetProcessLog;


/**
 * Builds {@link IReplicationGroupBacklog} that each group has a global order that the packets must
 * be processed by the corresponding {@link IReplicationTargetProcessLog}. The order is generated by
 * the order of which the packets were inserted to the backlog
 *
 * In other words, the backlog is a single list of packets such that a packet can be processed by
 * the target only if all the packets that appear before it in the list were processed.
 *
 * @author eitany
 * @since 8.0
 */
@com.gigaspaces.api.InternalApi
public class GlobalOrderBacklogBuilder
        implements IReplicationBacklogBuilder {
    private final IReplicationPacketDataProducer<?> _dataProducer;
    private final String _name;

    public GlobalOrderBacklogBuilder(IReplicationPacketDataProducer<?> dataProducer,
                                     String name) {
        _dataProducer = dataProducer;
        _name = name;
    }

    public GlobalOrderSyncGroupBacklog createSyncGroupBacklog(
            DynamicSourceGroupConfigHolder groupConfig) {
        return new GlobalOrderSyncGroupBacklog(groupConfig, _name, _dataProducer);
    }

    public GlobalOrderAsyncGroupBacklog createAsyncGroupBacklog(
            DynamicSourceGroupConfigHolder groupConfig) {
        return new GlobalOrderAsyncGroupBacklog(groupConfig, _name, _dataProducer);
    }

    public GlobalOrderReliableAsyncGroupBacklog createReliableAsyncGroupBacklog(
            DynamicSourceGroupConfigHolder groupConfig) {
        return new GlobalOrderReliableAsyncGroupBacklog(groupConfig, _name, _dataProducer);
    }

    @Override
    public String toString() {
        return "GlobalOrderBacklogBuilder [_dataProducer=" + _dataProducer
                + ", _name=" + _name + "]";
    }


}
